//const { spawn } = require('node:child_process');
const spawn = require('cross-spawn');
function spawnCommand(command,cmdArgs,options,
    done=(error,stdout,stderr)=>{
        debug&&debug({label:"spawnCommand onError",command:command,error:error,stdout:stdout,stderr:stderr})
        if(error) console.error("spawnCommand "+command+" error: "+stderr)
        else console.error("spawnCommand "+command+" results: "+stdout)
    }, 
    debug
) {
    try{
        debug&&debug({label:"spawnCommand",command:command,cmdArgs:cmdArgs})
        const child = spawn(command,cmdArgs,options)
        .on('error', (ex) => {
            debug&&debug({label:"spawnCommand onError",command:command,error:ex.message})
            done( ex.message,null,ex.message)
        });
        let result = ""
        child.stdout.setEncoding('utf8');
        child.stdout.on('data', function(data) {
            debug&&debug({label:"spawnCommand",onData:data})
            result+=data.toString();
        });
        child.stderr.setEncoding('utf8');
        child.stderr.on('data', function(data) {
            debug&&debug({label:"spawnCommand",onStderr:data})
            result+=data;
        });
        child.on('close', function(code) {
            debug&&debug({label:"spawnCommand",command:command,result:result,code:code})
            done && (code==0? done(null, result,null) : done(result, null, result))
        });
    } catch(ex) {
        debug&&debug({label:"spawnCommand",command:command,error:ex.message})
        done( ex.message,null,ex.message)
    }
}

module.exports = spawnCommand
